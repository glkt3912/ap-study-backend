generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                String                @unique
  username             String                @unique
  name                 String
  password             String
  role                 String                @default("user")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  id                   Int                   @id @default(autoincrement())
  refreshToken         String?
  refreshTokenExp      DateTime?
  afternoonTests       AfternoonTest[]
  examConfig           ExamConfig?
  morningTests         MorningTest[]
  quizSessions         QuizSession[]
  studyLogs            StudyLog[]
  studyPlanPreferences StudyPlanPreferences?
  studyPlan            StudyPlan?
  userAnswers          UserAnswer[]

  @@map("users")
}

model StudyWeek {
  id          Int        @id @default(autoincrement())
  weekNumber  Int
  title       String
  phase       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  goals       Json /// @type {string[]}
  studyPlanId Int?
  days        StudyDay[]
  studyPlan   StudyPlan? @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)

  @@unique([studyPlanId, weekNumber])
  @@map("study_weeks")
}

model StudyPlan {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  name           String
  description    String?
  isActive       Boolean          @default(true)
  startDate      DateTime         @default(now())
  targetExamDate DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  templateId     String?
  templateName   String?
  studyWeeksData Json?
  settings       Json             @default("{}") /// @type {StudyPlanSettings}
  milestones     StudyMilestone[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeks          StudyWeek[]

  @@map("study_plans")
}

model StudyDay {
  id            Int       @id @default(autoincrement())
  day           String
  subject       String
  estimatedTime Int
  actualTime    Int       @default(0)
  completed     Boolean   @default(false)
  understanding Int       @default(0)
  memo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  weekId        Int
  topics        Json /// @type {string[]}
  week          StudyWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@map("study_days")
}

model StudyLog {
  id            Int      @id @default(autoincrement())
  date          DateTime
  subject       String
  studyTime     Int
  understanding Int
  memo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completed     Boolean  @default(false)
  userId        Int
  topics        Json /// @type {string[]}
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_logs")
}

model MorningTest {
  id             Int      @id @default(autoincrement())
  date           DateTime
  category       String
  totalQuestions Int
  correctAnswers Int
  timeSpent      Int
  memo           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("morning_tests")
}

model AfternoonTest {
  id        Int      @id @default(autoincrement())
  date      DateTime
  category  String
  score     Int
  timeSpent Int
  memo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("afternoon_tests")
}





model Question {
  id          String       @id
  year        Int
  season      String
  section     String
  number      Int
  category    String
  subcategory String?
  difficulty  Int
  question    String
  answer      String
  explanation String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  choices     Json /// @type {string[]}
  tags        Json? /// @type {string[]}
  userAnswers UserAnswer[]

  @@map("questions")
}

model UserAnswer {
  id            Int      @id @default(autoincrement())
  questionId    String
  userAnswer    String
  isCorrect     Boolean
  timeSpent     Int?
  attemptNumber Int      @default(1)
  createdAt     DateTime @default(now())
  userId        Int
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

model QuizSession {
  id             Int       @id @default(autoincrement())
  sessionType    String
  category       String?
  totalQuestions Int
  correctAnswers Int       @default(0)
  totalTime      Int       @default(0)
  avgTimePerQ    Int       @default(0)
  score          Int       @default(0)
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  isCompleted    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_sessions")
}

model ExamConfig {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  examDate    DateTime
  targetScore Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_configs")
}

model StudyPlanTemplate {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  defaultPeriodDays  Int
  defaultWeeklyHours Int
  targetAudience     String
  difficulty         String
  features           Json /// @type {StudyPlanTemplateFeatures}
  isPopular          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("study_plan_templates")
}

model StudyScheduleTemplate {
  id                    Int      @id @default(autoincrement())
  name                  String
  description           String
  weeklyPattern         Json /// @type {WeeklyPatternData}
  targetDifficulty      String
  estimatedHoursPerWeek Int
  isFlexible            Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("study_schedule_templates")
}


model StudyPlanPreferences {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique
  reminderEnabled         Boolean  @default(true)
  reminderTime            String?
  weekendStudy            Boolean  @default(false)
  intensiveMode           Boolean  @default(false)
  adaptiveDifficulty      Boolean  @default(true)
  notificationPreferences Json     @default("{\"push\": true, \"daily\": true, \"email\": true, \"weekly\": false}") /// @type {NotificationPreferences}
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_plan_preferences")
}

model StudyMilestone {
  id            Int       @id @default(autoincrement())
  studyPlanId   Int
  title         String
  targetDate    DateTime
  isCompleted   Boolean   @default(false)
  completedDate DateTime?
  description   String?
  priority      String    @default("medium")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  studyPlan     StudyPlan @relation(fields: [studyPlanId], references: [id], onDelete: Cascade)

  @@map("study_milestones")
}
