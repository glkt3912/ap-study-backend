generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email             String             @unique
  name              String
  password          String
  role              String             @default("user")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  id                Int                @id @default(autoincrement())
  refreshToken      String?            // リフレッシュトークン
  refreshTokenExp   DateTime?          // リフレッシュトークン有効期限
  afternoonTests    AfternoonTest[]
  analysisResults   AnalysisResult[]
  examConfig        ExamConfig?
  morningTests      MorningTest[]
  predictionResults PredictionResult[]
  quizSessions      QuizSession[]
  reviewItems       ReviewItem[]
  reviewSessions    ReviewSession[]
  studyLogs         StudyLog[]
  userAnswers       UserAnswer[]

  @@map("users")
}

model StudyWeek {
  id         Int        @id @default(autoincrement())
  weekNumber Int        @unique
  title      String
  phase      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  goals      Json
  days       StudyDay[]

  @@map("study_weeks")
}

model StudyDay {
  id            Int       @id @default(autoincrement())
  day           String
  subject       String
  estimatedTime Int
  actualTime    Int       @default(0)
  completed     Boolean   @default(false)
  understanding Int       @default(0)
  memo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  weekId        Int
  topics        Json
  week          StudyWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@map("study_days")
}

model StudyLog {
  id            Int      @id @default(autoincrement())
  date          DateTime
  subject       String
  studyTime     Int
  understanding Int
  memo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completed     Boolean  @default(false)
  userId        Int
  topics        Json
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_logs")
}

model MorningTest {
  id             Int      @id @default(autoincrement())
  date           DateTime
  category       String
  totalQuestions Int
  correctAnswers Int
  timeSpent      Int
  memo           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("morning_tests")
}

model AfternoonTest {
  id        Int      @id @default(autoincrement())
  date      DateTime
  category  String
  score     Int
  timeSpent Int
  memo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("afternoon_tests")
}

model AnalysisResult {
  id                  Int      @id @default(autoincrement())
  analysisDate        DateTime
  overallScore        Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  studyPattern        Json
  weaknessAnalysis    Json
  studyRecommendation Json
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analysis_results")
}

model PredictionResult {
  id                  Int      @id @default(autoincrement())
  predictionDate      DateTime
  examDate            DateTime
  modelVersion        String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  passProbability     Json
  studyTimePrediction Json
  scorePrediction     Json
  examReadiness       Json
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prediction_results")
}

model ReviewItem {
  id                   Int      @id @default(autoincrement())
  subject              String
  topic                String
  lastStudyDate        DateTime
  nextReviewDate       DateTime
  reviewCount          Int      @default(0)
  difficulty           Int
  understanding        Int
  priority             Int
  forgettingCurveStage Int      @default(1)
  intervalDays         Int      @default(1)
  isCompleted          Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_items")
}

model ReviewSession {
  id                   Int      @id @default(autoincrement())
  sessionDate          DateTime
  totalItems           Int
  completedItems       Int      @default(0)
  sessionDuration      Int
  averageUnderstanding Float    @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_sessions")
}

model Question {
  id          String       @id
  year        Int
  season      String
  section     String
  number      Int
  category    String
  subcategory String?
  difficulty  Int
  question    String
  answer      String
  explanation String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  choices     Json
  tags        Json?
  userAnswers UserAnswer[]

  @@map("questions")
}

model UserAnswer {
  id            Int      @id @default(autoincrement())
  questionId    String
  userAnswer    String
  isCorrect     Boolean
  timeSpent     Int?
  attemptNumber Int      @default(1)
  createdAt     DateTime @default(now())
  userId        Int
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

model QuizSession {
  id             Int       @id @default(autoincrement())
  sessionType    String
  category       String?
  totalQuestions Int
  correctAnswers Int       @default(0)
  totalTime      Int       @default(0)
  avgTimePerQ    Int       @default(0)
  score          Int       @default(0)
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  isCompleted    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_sessions")
}

model ExamConfig {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  examDate    DateTime
  targetScore Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exam_configs")
}
