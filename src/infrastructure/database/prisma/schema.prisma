// Prisma Schema - データベース設計
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 学習週モデル
model StudyWeek {
  id         Int      @id @default(autoincrement())
  weekNumber Int      @unique
  title      String
  phase      String
  goals      String // JSON配列として保存
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // リレーション
  days StudyDay[]

  @@map("study_weeks")
}

// 学習日モデル  
model StudyDay {
  id            Int      @id @default(autoincrement())
  day           String // 月、火、水...
  subject       String
  topics        String // JSON配列として保存
  estimatedTime Int // 分
  actualTime    Int      @default(0)
  completed     Boolean  @default(false)
  understanding Int      @default(0) // 1-5
  memo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 外部キー
  weekId Int
  week   StudyWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@map("study_days")
}

// 学習記録モデル
model StudyLog {
  id            Int      @id @default(autoincrement())
  date          DateTime
  subject       String
  topics        String // JSON配列として保存
  studyTime     Int // 分
  understanding Int // 1-5
  memo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("study_logs")
}

// 午前問題記録モデル
model MorningTest {
  id             Int      @id @default(autoincrement())
  date           DateTime
  category       String
  totalQuestions Int
  correctAnswers Int
  timeSpent      Int // 分
  memo           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("morning_tests")
}

// 午後問題記録モデル
model AfternoonTest {
  id           Int      @id @default(autoincrement())
  date         DateTime
  category     String   // questionType → category に統一
  score        Int // 点数
  timeSpent    Int // 分
  memo         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("afternoon_tests")
}

// 学習分析結果モデル
model AnalysisResult {
  id              Int      @id @default(autoincrement())
  userId          String?
  analysisDate    DateTime
  studyPattern    String   // JSON形式で保存
  weaknessAnalysis String  // JSON形式で保存
  studyRecommendation String // JSON形式で保存
  overallScore    Int      // 0-100
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("analysis_results")
}

// 予測結果モデル
model PredictionResult {
  id                Int      @id @default(autoincrement())
  userId            String?
  predictionDate    DateTime
  examDate          DateTime
  passProbability   String   // JSON形式で保存
  studyTimePrediction String // JSON形式で保存
  scorePrediction   String   // JSON形式で保存
  examReadiness     String   // JSON形式で保存
  modelVersion      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("prediction_results")
}

// 復習項目モデル
model ReviewItem {
  id                    Int      @id @default(autoincrement())
  userId                String?
  subject               String
  topic                 String
  lastStudyDate         DateTime
  nextReviewDate        DateTime
  reviewCount           Int      @default(0)
  difficulty            Int      // 1-5
  understanding         Int      // 1-5
  priority              Int      // 0-100
  forgettingCurveStage  Int      @default(1) // 1-7
  intervalDays          Int      @default(1)
  isCompleted           Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("review_items")
}

// 復習セッションモデル
model ReviewSession {
  id                   Int      @id @default(autoincrement())
  userId               String?
  sessionDate          DateTime
  totalItems           Int
  completedItems       Int      @default(0)
  sessionDuration      Int      // 分
  averageUnderstanding Float    @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("review_sessions")
}

// 過去問題モデル（IPA公式過去問データ）
model Question {
  id          String   @id // ap2024spring_am_01 形式
  year        Int      // 2024
  season      String   // spring/autumn
  section     String   // morning/afternoon
  number      Int      // 問題番号
  category    String   // 基礎理論、コンピュータシステム等
  subcategory String?  // より詳細な分類
  difficulty  Int      // 1-5（推定難易度）
  question    String   // 問題文
  choices     String   // JSON配列["選択肢A", "選択肢B", ...]
  answer      String   // 正解（A,B,C,D または記述）
  explanation String?  // 解説
  tags        String?  // JSON配列でタグ管理
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  userAnswers UserAnswer[]

  @@map("questions")
}

// ユーザー回答記録モデル
model UserAnswer {
  id            Int      @id @default(autoincrement())
  userId        String?
  questionId    String
  userAnswer    String   // ユーザーの回答
  isCorrect     Boolean  // 正解フラグ
  timeSpent     Int?     // 回答にかかった時間（秒）
  attemptNumber Int      @default(1) // 何回目の挑戦か
  createdAt     DateTime @default(now())

  // リレーション
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

// Quizセッションモデル
model QuizSession {
  id              Int      @id @default(autoincrement())
  userId          String?
  sessionType     String   // category/random/review/weak_points
  category        String?  // セッションの対象カテゴリ
  totalQuestions  Int      // 出題数
  correctAnswers  Int      @default(0)
  totalTime       Int      @default(0) // 総回答時間（秒）
  avgTimePerQ     Int      @default(0) // 平均回答時間
  score           Int      @default(0) // スコア（正答率%）
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  isCompleted     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("quiz_sessions")
}
